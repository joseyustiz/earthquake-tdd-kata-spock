plugins {
    id "org.sonarqube" version "2.8"
    id "java"
    id "groovy"
    id "jacoco"
}
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: "jacoco" // this plugin provides code coverage metrics for Java code

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

subprojects {
    sonarqube {
        String regex = "(.*)/(.*)"
        String projectKey = project.name.replaceAll(regex, "\$1:\$2")
        String sonarModuleKey = rootProject.group + ':' + rootProject.name + ':' + projectKey
        properties {
            property "sonar.moduleKey", sonarModuleKey
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}


subprojects {
    sonarqube {
        properties {
            property "sonar.tests", "src/test"
        }
    }
}

jacocoTestReport {
    group = 'Coverage reports'
    description = 'Generates a test coverage report for a project'

    additionalSourceDirs.from  files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)

    reports {
        xml.enabled true
        html.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco")
        html.destination = file("${buildDir}/reports/jacoco/html")
    }
}
allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}
//
//task jacocoMerge(type: JacocoMerge) {
//    publishedProjects.each { executionData it.tasks.withType(Test) }
//    doFirst { executionData = files(executionData.findAll { it.exists() }) }
//}
//
//task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
//    description = 'Generates an aggregate report from all subprojects'
//    dependsOn publishedProjects.test, jacocoMerge
//
//    additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
//    sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
//    classDirectories.from = files(publishedProjects.sourceSets.main.output)
//
//    executionData jacocoMerge.destinationFile
//
//    onlyIf = {
//        true
//    }
//
//    doFirst {
//        executionData.from files(executionData.findAll { it.exists() })
//    }
//
//    reports {
//        html.enabled = true // human readable
//        xml.enabled = true // required by coveralls
//        xml.destination = file("${buildDir}/reports/jacoco")
//        html.destination = file("${buildDir}/reports/jacoco/html")
//        sourceSets sourceSets.main
//    }

//    afterEvaluate {
//        classDirectories.from files(classDirectories.files.collect {
//            fileTree(
//                    dir: it,
//                    excludes: [
//                            "*io/saas/starter/Application*",
//                            "*io/saas/starter/configuration/*",
//                            "*io/saas/starter/*Test*/*"
//                    ]
//            )
//        })
//    }
//}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            element = 'CLASS'
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 1.0
//            }
//            excludes = [
//                    'io.saas.starter.configuration.*',
//                    '*Test*',
//                    'io.saas.starter.Application'
//            ]
//        }
//    }
//}

//jacocoRootReport.dependsOn jacocoTestCoverageVerification


//project.tasks["sonarqube"].dependsOn "jacocoTestReport"
